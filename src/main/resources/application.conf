akka {
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  loglevel = DEBUG
  actor {
    allow-java-serialization = off
    provider = "cluster"
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
    }
    serialization-bindings {
      "com.vrann.Message" = jackson-json
      "com.vrann.BlockMatrixType" = jackson-json
      "com.vrann.positioned.PositionCommand" = jackson-json
    }
  }
  remote {
    artery {
      enabled = on
      transport = tcp
      canonical {
        port = ${AKKA_PORT}
        hostname = ${MY_POD_IP}
      }
      bind {
        port = ${AKKA_PORT}
        hostname = ${MY_POD_IP}
        bind-timeout = 3s
      }

      log-sent-messages = on
      log-received-messages = on
    }
  }


  management {
//    health-checks {
//      readiness-checks {
//        example-ready = "com.vrann.actormatrix.BasicHealthCheck"
//      }
//    }
    health-check: {
      ready-states: ["Up", "WeaklyUp"]
      readiness-path: "ready"
      liveness-path: "alive"
    }
  }
}

//kamon {
//  environment {
//    service = "ActorMatrix"
//  }
//  apm {
//    api-key = ${KAMON_API_KEY}
//  }
//  modules {
//    prometheus-reporter {
//      enabled = true
//      name = "Prometheus Reporter"
//      description = "Exposes a scrape endpoint for Prometheus"
//      factory = "kamon.prometheus.PrometheusReporter$Factory"
//    }
//    host-metrics {
//      enabled = no
//    }
//    process-metrics {
//      enabled = yes
//    }
//    jvm-metrics {
//      enabled = yes
//    }
//  }
//  prometheus {
//    start-embedded-http-server = yes
//    refresh-scheduler-pool-size = 5
//    embedded-server {
//      hostname = "0.0.0.0"
//      port = ${KAMON_PORT}
//      impl = "sun"
//    }
//    refresh-interval = 1 second
//    subscriptions {
//      histogram        = [ "**" ]
//      gauge            = [ "**" ]
//      counter          = [ "**" ]
//    }
//  }
//  metric {
//    # Interval at which metric snapshots will be collected and sent to all metric reporters.
//    tick-interval = 1 second
//    optimistic-tick-alignment = yes
//  }
//  instrumentation.akka {
//    filters {
//      actors.trace {
//        includes = [ "*" ]
//      }
//      actors.start-trace {
//        includes = [ "*" ]
//      }
//    }
//    http {
//      client {
//        propagation {
//          enabled = yes
//          channel = default
//        }
//        tracing {
//          enabled = yes
//          span-metrics = on
//          tags {
//            url = span
//            method = metric
//            status-code = metric
//
//            from-context {
//              requestID = span
//            }
//          }
//        }
//      }
//    }
//  }
//}